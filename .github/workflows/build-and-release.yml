name: Build and Release Workflow

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Release type (hotfix, minor, major)'
        required: true
        default: 'minor'

permissions:
  contents: write
  actions: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Schritt 1: Repository auschecken
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Stellt sicher, dass alle Tags verfügbar sind

      # Schritt 2: Node.js einrichten
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.11.0'

      # Schritt 3: Aktuelle Version ermitteln und neue Version berechnen
      - name: Determine version
        id: versioning
        run: |
          # Letztes Git-Tag holen
          LAST_VERSION=$(git tag --sort=-creatordate | head -n 1)
          echo "Last version: $LAST_VERSION"

          # Neue Version basierend auf Eingabe berechnen
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_VERSION#v}"

          if [ "$VERSION_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$VERSION_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$VERSION_TYPE" == "hotfix" ]; then
            PATCH=$((PATCH + 1))
          else
            echo "Invalid version type: $VERSION_TYPE"
            exit 1
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Schritt 4: Abhängigkeiten installieren
      - name: Install dependencies
        run: npm install

      # Schritt 5: Projekt bauen
      - name: Build project
        run: npm run build -- --configuration=production

      # Schritt 6: Dist-Ordner komprimieren
      - name: Compress dist folder
        run: zip -r dist.zip dist

      # Schritt 7: Release erstellen und dist.zip hochladen
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: "Release ${{ env.NEW_VERSION }}"
          body: |
            ### Changes
            - New release with version ${{ env.NEW_VERSION }} based on ${{ github.event.inputs.version_type }} changes.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: dist.zip
          asset_content_type: application/zip
